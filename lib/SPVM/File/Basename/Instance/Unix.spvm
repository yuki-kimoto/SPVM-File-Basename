class File::Basename::Instance::Unix extends File::Basename::Instance {
  use Regex;

  our $RE_FILEPARSE1 : Regex;
  our $RE_STRIP_TRAILING_SEP : Regex;
  
  INIT {
    Regex->INIT;
    $RE_FILEPARSE1 = Regex->new("(?s)^(.*/)?(.*)");
    $RE_STRIP_TRAILING_SEP = Regex->new("(?s)(.)/*\z");
  }
  
  # Class Methods
  static method new : File::Basename::Instance::Unix () {
    
    my $self = new File::Basename::Instance::Unix;
    
    return $self;
  }
  
  # Instance Methods
  method fileparse : string[] ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }
    
    my $dirpath = (string)undef;
    my $basename = (string)undef;
    
    if (my $match = $RE_FILEPARSE1->match($path)) {
      $dirpath = $match->cap1;
      $basename = $match->cap2;
    }
    
    unless (length $dirpath) {
      $dirpath = "./";
    }
    
    return [$basename, $dirpath, ""];
  }
  
  method basename : string ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }
    
    $path = $self->_strip_trailing_sep($path);

    my $fileparse = $self->fileparse($path);
    
    my $basename = $fileparse->[0];
    my $dirname = $fileparse->[1];

    if (!length $basename) {
      $basename = $dirname;
    }
    
    return $basename;
  }
  
  method dirname : string ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }
    
    my $fileparse = $self->fileparse($path);
    
    my $basename = $fileparse->[0];
    my $dirname = $fileparse->[1];

    $dirname = $self->_strip_trailing_sep($dirname);
    
    unless (length $basename) {
      my $fileparse_again = $self->fileparse($dirname);
      $dirname = $fileparse_again->[1];
      $dirname = $self->_strip_trailing_sep($dirname);
    }

    return $dirname;
  }

  method _strip_trailing_sep : string ($path : string)  {
    
    $path = $RE_STRIP_TRAILING_SEP->replace($path, method : string ($re : Regex, $match : Regex::Match) {
      return $match->cap1;
    });
    
    return $path;
  }
}
