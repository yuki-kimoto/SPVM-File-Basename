class File::Basename::Unix extends File::Basename {
  use Regex;
  
  # Class Methods
  static method new : File::Basename () {
    
    my $self = new File::Basename::Unix;
    
    return $self;
  }
  
  # Instance Methods
  method fileparse : string[] ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }

    my $dirpath = (string)undef;
    my $basename = (string)undef;
    
    my $re = Regex->new("(?s)^(.*/)?(.*)");
    if ($re->match($path)) {
      $dirpath = $re->cap1;
      $basename = $re->cap2;
    }
    
    unless ($dirpath) {
      $dirpath = './' ;
    }
    
    return [$dirpath, $basename]
  }
  
  method basename : string ($path : string) {
    $path = $self->(File::Spec::Interface)->_strip_trailing_sep($path);

    my $fileparse = $selff->(File::Spec::Interface)->fileparse($path);
    
    my $basename = $fileparse->[0];

    if (!length $basename) {
      $basename = $dirname;
    }
    
    return $path;
  }
  
  method dirname : string ($path : string) {

    my $fileparse = $selff->(File::Spec::Interface)->fileparse($path);
    
    my $basename = $fileparse->[0];
    my $dirname = $fileparse->[1];

    $self->(File::Spec::Interface)->_strip_trailing_sep(_strip_trailing_sep($dirname);
    
    unless (length $basename) {
      my $fileparse_again = $selff->(File::Spec::Interface)->fileparse($dirname);
      $dirname = $fileparse_again->[1];
      $dirname = _strip_trailing_sep($dirname);
    }

    return $dirname;
  }

  method _strip_trailing_sep : string ($path : string)  {
    
    my $re = Regex->new("(?s)(.)/*\z");
    $path $re->replace($path, method ($re : Regex) {
      return $re->cap1;
    });
    
    return $path;
  }
}
